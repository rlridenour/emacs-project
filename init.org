#+TITLE: Emacs Init
#+AUTHOR: Randy Ridenour
#+OPTIONS: toc:2 num:t
# #+STARTUP: overview hidestars indent
#+PROPERTY: header-args :results silent :tangle "~/.config/emacs/init.el"
#+AUTO_TANGLE: t

Enable lexical bindings in the exported Emacs Lisp file.

#+begin_src emacs-lisp
  ;;; init.el -*- lexical-binding: t; -*-
#+end_src

* Preliminaries

** User Information

#+begin_src emacs-lisp
      (setq user-full-name "Randy Ridenour")
      (setq user-mail-address "rlridenour@fastmail.com")
#+end_src



** Customize

** Custom Variables

Keep custom-set variables separate from configuration file.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+end_src


#+begin_src emacs-lisp
  (recentf-mode)
    (setopt recentf-max-menu-items 1000
    recentf-max-saved-items 1000)

#+end_src



Use =C-x c= to kill Emacs.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x c") #'save-buffers-kill-emacs)
#+end_src


* Appearance

** Modus Themes

#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure
    :config
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
	  modus-themes-mixed-fonts t
	  modus-themes-variable-pitch-ui t
	  modus-themes-italic-constructs t
	  modus-themes-bold-constructs t)

    ;; Maybe define some palette overrides, such as by using our presets
    (setq modus-themes-common-palette-overrides
	  modus-themes-preset-overrides-faint)

    ;; Load the theme of your choice.
    (load-theme 'modus-operandi t)
    :bind
    ("<f9>" . #'modus-themes-rotate))
#+end_src

** Font

#+begin_src emacs-lisp
  ;; Main typeface
  (set-face-attribute 'default nil :family "SF Mono" :height 160 :weight 'medium)
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "SF Pro Text" :height 1.0 :weight 'medium)
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "SF Mono" :height 1.0 :weight 'medium)
#+end_src

** Package Repositories

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src


** Ace Window

#+begin_src emacs-lisp :tangle yes
    (use-package ace-window
      :ensure
      :config
  (setq aw-dispatch-always t)
      :bind
      (("M-O" . #'ace-window)
       ("M-o" . #'rlr/quick-window-jump)))
    #+end_src

#+begin_src emacs-lisp
(defun rlr/quick-window-jump ()
"If only one window, switch to previous buffer, otherwise call ace-window."
    (interactive)
    (let* ((window-list (window-list nil 'no-mini)))
      (if (< (length window-list) 3)
	  ;; If only one window, switch to previous buffer. If only two, jump directly to other window.
	  (if (one-window-p)
	  (switch-to-buffer nil)
	(other-window 1))
	(ace-window t))))
#+end_src



* Completion

** Vertico

#+begin_src emacs-lisp :lexical t
  (use-package vertico
    :ensure
    :demand
    :custom (vertico-cycle t)
    :config
    (setf (car vertico-multiline) "\n") ;; don't replace newlines
    (vertico-mode)
    ;; (setq vertico-multiform-commands
    ;;  '((consult-line
    ;;       posframe
    ;;       (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
    ;;       (vertico-posframe-border-width . 10)
    ;;       ;; NOTE: This is useful when emacs is used in both in X and
    ;;       ;; terminal, for posframe do not work well in terminal, so
    ;;       ;; vertico-buffer-mode will be used as fallback at the
    ;;       ;; moment.
    ;;       (vertico-posframe-fallback-mode . vertico-buffer-mode))
    ;;      (t posframe)))
    (vertico-multiform-mode 1)
    (setq vertico-multiform-categories
  	  '((file grid)
  	    ;; (jinx grid (vertico-grid-annotate . 20))
  	    ;; (citar buffer)
  	    )
  	  )
    (setq vertico-cycle t) ;; enable cycling for 'vertico-next' and 'vertico-prev'
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
    :bind
    (:map vertico-map
  	      ;; keybindings to cycle through vertico results.
  	      ("C-h" . #'+minibuffer-up-dir)
  	      ("<backspace>" . #'vertico-directory-delete-char)
  	      ("RET" . #'vertico-directory-enter)))
#+end_src


** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :ensure
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src


** Consult

#+begin_src emacs-lisp
    (use-package consult
      :ensure
      :demand
      :bind
      (("C-x b" . #'consult-buffer)
       ("s-f" . #'consult-line)
      ("s-r" . #'consult-buffer)
      ("M-y" . #'consult-yank-pop)))
#+end_src

Some functions to use with Consult.

#+begin_src emacs-lisp
    (defun rlr/consult-rg ()
      "Function for `consult-ripgrep' with the `universal-argument'."
      (interactive)
      (consult-ripgrep (list 4)))

    (defun rlr/consult-fd ()
      "Function for `consult-find' with the `universal-argument'."
      (interactive)
      (consult-find (list 4)))
#+end_src



* Org Mode

  (use-package org
    :ensure nil
    :init
    ;; (setq org-directory "/Users/rlridenour/Library/Mobile Documents/com~apple~CloudDocs/org/")
    (setq org-directory "/Users/rlridenour/Library/Mobile Documents/com~apple~CloudDocs/org/")
    :config
    (setq org-list-allow-alphabetical t)
    (setq org-highlight-latex-and-related '(latex script entities))
    (setq org-startup-indented nil)
    (setq org-adapt-indentation nil)
    (setq org-hide-leading-stars nil)
    (setq org-hide-emphasis-markers t)
    (setq org-list-indent-offset 2)
    (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
    (setq org-use-speed-commands t)

    ;; Hide drawers
    (setopt org-cycle-hide-drawer-startup t)
    (setopt org-startup-folded 'nofold)

    (set-face-attribute 'org-level-1 nil :height 1.3 :weight 'bold :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-2 nil :height 1.2 :weight 'bold :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-3 nil :height 1.1 :weight 'bold :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-4 nil :height 1.0 :weight 'bold :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-5 nil :height 1.0 :weight 'bold :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-6 nil :height 1.0 :weight 'bold :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-7 nil :height 1.0 :weight 'bold :inherit 'fixed-pitch)
    (set-face-attribute 'org-level-8 nil :height 1.0 :weight 'bold :inherit 'fixed-pitch)

    ;; Make the document title a bit bigger
    (set-face-attribute 'org-document-title nil :weight 'bold :height 1.5)

    ;; Make LaTeX previews larger.
    (plist-put org-format-latex-options :scale 1.5)

    (setq org-support-shift-select t)
    (setq org-special-ctrl-a/e t)
    ;; (setq org-footnote-section nil)
    (setq org-html-validation-link nil)
    (setq org-time-stamp-rounding-minutes '(0 15))
    (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-log-done t)
    (setq org-todo-keyword-faces
	  '(("DONE" . "green4") ("TODO" . org-warning)))
    (setq org-agenda-files '("/Users/rlridenour/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/"))
    (setq org-agenda-start-on-weekday nil)
    (setq org-agenda-window-setup 'current-window)
    (setq org-link-frame-setup
	  '((vm . vm-visit-folder-other-frame)
	(vm-imap . vm-visit-imap-folder-other-frame)
	(gnus . org-gnus-no-new-news)
	(file . find-file)
	(wl . wl-other-frame)))
    (require 'org-tempo)
    ;; Open directory links in Dired.
    (add-to-list 'org-file-apps '(directory . emacs)))
#+end_src


** Org Auto Tangle

Use ~org-auto-tangle~ to generate ~init.el~ whenever ~init.org~ is saved.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :hook
    (org-mode . org-auto-tangle-mode))
#+end_src



** Yasnippet

YASnippet is a template system for Emacs.

https://github.com/joaotavora/yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :custom
    (yas-snippet-dirs '("~/.config/emacs/snippets"))
    :config
    (yas-global-mode))
#+end_src

** Hydras

#+begin_src emacs-lisp
  (use-package major-mode-hydra
    :ensure
    :commands
    (pretty-hydra-define)
    :bind
    ("s-m" . #'major-mode-hydra))
#+end_src

*** Toggle

#+begin_src emacs-lisp
(pretty-hydra-define hydra-toggle
       (:color teal :quit-key "q" :title "Toggle")
       (" "
	(("a" abbrev-mode "abbrev" :toggle t)
	 ("b" toggle-debug-on-error "debug" (default value 'debug-on-error))
	 ("d" global-devil-mode "devil" :toggle t)
	 ("e" evil-mode "evil" :toggle t)
	 ("i" aggressive-indent-mode "indent" :toggle t)
	 ("f" auto-fill-mode "fill" :toggle t)
	 ("l" display-line-numbers-mode "linum" :toggle t)
	 ("m" variable-pitch-mode "variable-pitch" :toggle t)
	 ("p" electric-pair-mode "electric-pair" :toggle t)
	 ("t" toggle-truncate-lines "truncate" :toggle t)
	 ("s" whitespace-mode "whitespace" :toggle t))
	" "
	(("c" cdlatex-mode "cdlatex" :toggle t)
	 ("o" olivetti-mode "olivetti" :toggle t)
	 ("r" read-only-mode "read-only" :toggle t)
	 ("v" view-mode "view" :toggle t)
	 ("W" wc-mode "word-count" :toggle t)
	 ("S" auto-save-visited-mode "auto-save" :toggle t)
	 ("C" cua-selection-mode "rectangle" :toggle t))))
#+end_src


*** Buffers

#+begin_src emacs-lisp
(pretty-hydra-define hydra-buffer
       (:color teal :quit-key "q" :title "Buffers and Files")
       ("Open"
	(("b" ibuffer "ibuffer")
	 ("m" consult-bookmark "bookmark")
	 ("w" consult-buffer-other-window "other window")
	 ("f" consult-buffer-other-frame "other frame")
	 ("d" crux-recentf-find-directory "recent directory")
	 ("a" crux-open-with "open in default app"))
	"Actions"
	(("D" crux-delete-file-and-buffer "delete file")
	 ("R" crux-rename-file-and-buffer "rename file")
	 ("K" rlr/kill-other-buffers "kill other buffers")
	 ("N" nuke-all-buffers "Kill all buffers")
	 ("c" crux-cleanup-buffer-or-region "fix indentation"))
	"Misc"
	(("t" crux-visit-term-buffer "ansi-term")
	 ("T" iterm-goto-filedir-or-home "iTerm2")
	 ("i" crux-find-user-init-file "init.el")
	 ("s" crux-find-shell-init-file "fish config"))
	))
#+end_src


*** Locate

#+begin_src emacs-lisp
(pretty-hydra-define hydra-locate
       (:color teal :quit-key "q" title: "Search")
       ("Buffer"
	(("c" pulsar-highlight-dwim "find cursor")
	 ("h" consult-org-heading "org heading")
	 ("l" consult-goto-line "goto-line")
	 ("i" consult-imenu "imenu")
	 ("m" consult-mark "mark")
	 ("o" consult-outline "outline"))
	"Global"
	(("M" consult-global-mark "global-mark")
	 ("n" consult-notes "notes")
	 ("r" consult-ripgrep "ripgrep")
	 ("d" rlr/consult-rg "rg from dir")
	 ("f" rlr/consult-fd "find from dir"))
	"Files"
	(("e" rr/open-init-file "Emacs init")
	 ("s" goto-shell-init "Fish functions"))
	))
#+end_src


